name: Build, Test and Deploy to Prod

on: 
  push: 
    branches: 
      - main
  workflow_dispatch:

env: 
  SQLX_OFFLINE: true
  DATABASE_URL: postgresql://postgres:${{ secrets.DATABASE_URL }}@db:5432/dahlia

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Set up POSTGRES environment
        run: |
          echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD }}" >> $GITHUB_ENV

      - name: Build and Test code
        run: |
          cargo build --verbose
          cargo test --verbose

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Images
        uses: docker/bake-action@v6
        with: 
          push: true
          files: docker-bake.hcl

  deploy: 
    needs: build
    runs-on: ubuntu-latest
    env:
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps: 
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with: 
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install sshpass
        run: sudo apt-get install sshpass

      - name: Copy docker-compose.yml to droplet
        run: sshpass -v -p ${{ secrets.DROPLET_PASSWORD }} scp -o StrictHostKeyChecking=no docker-compose.yml root@${{ vars.DROPLET_IP }}:~

      - name: Deploy
        uses: appleboy/ssh-action@master
        with: 
          host: ${{ vars.DROPLET_IP }}
          username: root
          password: ${{ secrets.DROPLET_PASSWORD }}
          script: |
            cd ~
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            docker-compose down
            docker-compose pull
            docker-compose up -d
