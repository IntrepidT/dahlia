[package]
name = "dahlia"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
actix-files = { version = "0.6", optional = true }
actix-web = { version = "4", optional = true, features = ["macros"] }
console_error_panic_hook = "0.1"
http = { version = "1.0.0", optional = true }
leptos = { version = "0.6", features = ["nightly"] }
leptos_meta = { version = "0.6", features = ["nightly"] }
leptos_actix = { version = "0.6", optional = true }
leptos_router = { version = "0.6", features = ["nightly"] }
wasm-bindgen = "=0.2.100"
serde = {version = "1.0.215", features = ["derive"]}
uuid = {version = "1.11.0", features =  ["v4", "js", "serde"]}
chart_rs = "0.1.0"
validator = {version = "0.19.0", features = ["derive"]}
cfg-if = "1.0.0"
once_cell = "1.20.2"
chrono = {version = "0.4.38", features = ["serde"]}
num-format = "0.4.4"
thiserror = "2.0.3"
icondata = "0.4.0"
leptos_icons = "0.3.1"
strum = "0.26.3"
strum_macros = "0.26.4"
sqlx = {version = "0.8.3", optional = true, features = ["uuid", "time", "chrono", "macros", "postgres", "runtime-tokio-rustls"]}
tokio = {version = "1.43.0", optional = true}
dotenvy = "0.15.7"
log = "0.4.25"
env_logger = "0.11.6"
futures = "0.3.31"
time = "0.3.37"
argon2 = "0.5.3"
reqwest = { version = "0.12.12", default-features = false, features = ["json", "rustls-tls"] }
csv = "1.3.1"
web-sys = {version = "0.3.77", features = ["HtmlInputElement", "FileList", "File"]}
oneshot = "0.1.11"
js-sys = "0.3.77"
wasm-bindgen-futures = "0.4.50"
actix-web-actors = { version = "4.3.1", optional = true}
serde_json = "1.0.140"
actix = {version = "0.13.5", optional = true}
gloo-utils = "0.2.0"
polars = { version = "0.46.0", optional = true, features = ["lazy", "random", "strings", "temporal"]}
rand = { version = "0.8.5", optional = true, features = ["getrandom"]}
getrandom = {version = "0.3.3", optional = true, features = ["wasm_js"]}
lettre = { version = "0.11.16", default-features = false, optional = true, features = ["tokio1", "smtp-transport", "tokio1-native-tls", "builder"]}

[features]
csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr"]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = [
  "dep:actix",
  "dep:actix-files",
  "dep:actix-web",
  "dep:actix-web-actors",
  "dep:polars",
  "dep:leptos_actix",
  "dep:getrandom",
  "dep:rand",
  "dep:lettre",
  "leptos/ssr",
  "leptos_meta/ssr",
  "leptos_router/ssr",
  "dep:sqlx",
  "dep:tokio",
]

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "dahlia"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output/output.css"
# Assets source dir. All files found here will be copied and synchronized to site-root.
# The assets-dir cannot have a sub directory with the same name/path as site-pkg-dir.
#
# Optional. Env: LEPTOS_ASSETS_DIR.
assets-dir = "assets"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "0.0.0.0:8080"
# The port to use for automatic reload monitoring
reload-port = 8081
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"
